<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Advanced Js | Programming Workshop]]></title>
  <link href="http://workshop.theresnobox.net/blog/categories/advanced-js/atom.xml" rel="self"/>
  <link href="http://workshop.theresnobox.net/"/>
  <updated>2014-10-05T09:07:15-04:00</updated>
  <id>http://workshop.theresnobox.net/</id>
  <author>
    <name><![CDATA[Kristi Centinaro]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[YouTube Player]]></title>
    <link href="http://workshop.theresnobox.net/blog/2014/10/05/youtube-player/"/>
    <updated>2014-10-05T08:32:21-04:00</updated>
    <id>http://workshop.theresnobox.net/blog/2014/10/05/youtube-player</id>
    <content type="html"><![CDATA[<p>In this exercise, you&rsquo;ll try to bring in Youtube video information using their JSON API. You may find <a href="http://gdisf-js-apis.appspot.com/">these slides</a> useful.</p>

<p>Start with <a href="http://www.teaching-materials.org/ajax/jsapis_solution.html">this file</a>.</p>

<ul>
<li>Go to the <a href="https://developers.google.com/youtube/2.0/developers_guide_jsonc">Youtube API docs</a> and read through them. Look at the sample output and the example URLs for the API. Find a URL that will give you search results, and test that out in the browser.</li>
<li>The webpage currently brings in video information using the jQuery <code>$.ajax</code> function to bring in a local <code>videos.json</code> file into the page.</li>
<li>Change that function so that it instead brings in the results of a Youtube API search from the Youtube servers and displays those results instead. Search for whatever you fancy, but limit the search to 5 results.</li>
<li><strong>Tips:</strong> Remember that the JSON that the Youtube API returns will be different than the JSON format of <code>videos.json</code>. You should <code>console.log</code> inside your callback to see what the data looks like and make sure you&rsquo;re using it correctly. In particular, check how they store the <code>ID</code>, the <code>author</code>, and the <code>rating</code>.</li>
<li><strong>Bonus:</strong> Create your own playlist on Youtube of your favorite videos, and bring that into the page instead.</li>
<li><strong>Bonus:</strong> Add a search button to the page so that people can search for any query.</li>
</ul>


<p>Make sure that you use your browser developer tools to make debugging easier while working on this. Check for errors, and use <code>console.log()</code> to figure out how far your code makes it, and what the values of your variables are along the way.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Visualization]]></title>
    <link href="http://workshop.theresnobox.net/blog/2014/10/05/data-visualzation/"/>
    <updated>2014-10-05T08:23:35-04:00</updated>
    <id>http://workshop.theresnobox.net/blog/2014/10/05/data-visualzation</id>
    <content type="html"><![CDATA[<p>The point of this exercise is to learn to read, manipulate, and visualize data in JavaScript.</p>

<ul>
<li>Find an interesting dataset in some sort of text format (XML, JSON, CSV, etc).</li>
<li>Store the dataset in your project folder.</li>
<li>Truncate it to a reasonable length if itâ€™s very long (i.e. 1000 rows). Some possible sources are:

<ul>
<li><a href="http://explore.data.gov">explore.data.gov</a></li>
<li><a href="http://usgovxml.com">usgovxml.com</a></li>
<li><a href="http://geocommons.com">geocommons.com</a></li>
</ul>
</li>
<li>Create an empty webpage and load the dataset into your webpage using an AJAX or JSONP request. (See slides: <a href="http://www.teaching-materials.org/ajax/">AJAX/JSONP</a>)</li>
<li>Display the data as a <code>table</code> with columns for each of the attributes. (See slides: <a href="http://www.teaching-materials.org/htmlcss-1day/lesson3/slides.html#slide3">HTML Tables</a>)</li>
<li>Use the <a href="http://tablesorter.com/docs/">tablesorter</a> jQuery plugin to make the table sortable. (See slides: <a href="http://www.teaching-materials.org/jquery/">jQuery</a>)</li>
<li>Create a <code>form</code> above the <code>table</code> which lets users filter or manipulate the data somehow, i.e. a dropdown box to only show rows matching a particular query, or a way of summing up attributes. Whatever would be useful with the data. (See slides: <a href="http://www.teaching-materials.org/javascript/slides/objectsdom.html">DOM</a>, <a href="http://www.teaching-materials.org/javascript/slides/animevents.html">Events</a>)</li>
<li>Use the <a href="http://www.highcharts.com/">High Charts JS library</a> to visualize a numerical aspect of the data. Or find <a href="http://selection.datavisualization.ch/">a different library here</a>.</li>
<li>If the data has a geographical aspect (locations), use the <a href="https://developers.google.com/maps/">Google Maps API</a> to plot it on a map. (See slides: <a href="http://gdisf-js-apis.appspot.com/">JS APIs</a>)</li>
<li>Use <a href="getbootstrap.com">Twitter Bootstrap</a> on the site to make it prettier, styling the buttons and table.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Memory Game]]></title>
    <link href="http://workshop.theresnobox.net/blog/2014/10/04/memory-game/"/>
    <updated>2014-10-04T16:44:32-04:00</updated>
    <id>http://workshop.theresnobox.net/blog/2014/10/04/memory-game</id>
    <content type="html"><![CDATA[<h1>The Memory Game</h1>

<p>In this exercise, you&rsquo;ll make a LOLCat memory game &ndash; you can see a screenshot of a sample solution on the right. A memory game consists of an even number of tiles with images on one side and a generic back. Each image appears on precisely two tiles. You start the game with all tiles turned face down, and proceed to flip over two tiles at a time. If the two tiles have the same image, they remain face up. If not, they&rsquo;re flipped face down again after a short delay. The goal of the game is to get all the tiles flipped face up (i.e., find all the matching image pairs) in the least number of tries.</p>

<p><img src="/images/posts/beg_js/memory1.png"><br/>
<em>Example of what we&rsquo;re building.</em></p>

<p>We&rsquo;ll make the game more fun by using random LOLCat images from <a href="http://lolcat.com">http://lolcat.com</a> for the tiles. This site works particularly well for our purposes because their images follow a regular naming scheme so we can avoid scraping image URLs from sites by hand. The lolcat.com image URLs follow the pattern <code>http://lolcat.com/images/lolcats/NNNN.jpg</code>, where <code>NNNN</code> is a sequentially assigned number. Some experimentation shows that most of the range between <code>900</code> and <code>1250</code> works well, though a few of the images are missing. (If you happen to pick a missing one, it&rsquo;ll appear as a broken image as show in the example &ndash; don&rsquo;t worry about it, or just reload your page to pick another set.)</p>

<h2>Here are some suggested steps for building the game:</h2>

<p>Write the HTML for the game&rsquo;s page, displaying a grid of face-down tiles. You can use any image you want for the tiles&#8217; backs, but make sure it&rsquo;s not easily confused with the LOLCat pictures, so it&rsquo;s clear whether a tile is face up or face down.</p>

<p>You&rsquo;ll probably want to use a <code>&lt;table&gt;</code> to lay out the tiles, and set the width and height of each image by hand. You can either write the table by hand into your HTML file, or write code to generate it dynamically using <code>document.createElement</code> and <code>appendChild</code>.</p>

<p>Write code to pick a bunch of random LOLCat image URLs and stick two copies of each URL into an array, then randomize the order of the array (using the code from the previous exercise).</p>

<p>You might also take this opportunity to preload the images so there&rsquo;ll be no delay when they&rsquo;re flipped over for the first time. Make the preload images visible for now so you can verify that you&rsquo;re forming the URLs correctly.</p>

<p>Assign one LOLCat URL from the randomized array to each tile. The easiest way to attach the URLs is to store them in a made-up attribute (e.g. facesrc) right on the DOM image elements.</p>

<p>The browser will ignore any attributes it doesn&rsquo;t understand, but you&rsquo;ll be able to retrieve them later in your code when handling click events on the elements. (Note though that Firebug will not show your custom attribute in the DOM pane.)</p>

<p>Attach a <code>click</code> handler to each tile that will turn it face up. Make sure that clicking on tiles that are already face up does nothing.</p>

<p>Add a <code>timeout</code> handler when a tile is turned face up that will flip the tile face down again after a short delay (e.g., 500 milliseconds).
Add the game logic that keeps track of the tiles that are face up and reacts appropriately based on whether they match or not.</p>

<p>You should now have a working game! Have fun playing it and tweaking it to really make it your own.</p>

<p><strong>Here&rsquo;s a few suggestions for extra features you could add:</strong>
  - Add an outline around &ldquo;active&rdquo; tiles (flipped up but not yet matched) so it&rsquo;s clear which tile the player is currently trying to match.
  Add a timer or move counter to make the game more competitive. (For the timer, window.setInterval() could prove useful.)
  - When the game is over, allow the player to see the full-size LOLCat pictures from the tiles.
  - Allow the player to start a new game with a button, rather than by reloading the page. You could also allow them to pick the size of the board to play on.
  - Manually make a list of &ldquo;bad&rdquo; image numbers in the code to avoid picking them, or find a different source of pictures to play with.</p>
]]></content>
  </entry>
  
</feed>
